plugins {
    id 'groovy'
    id 'application'
}

def klassName = 'io.github.mcolletta.miride.MirIDE'

application {
    mainClass = klassName
}

dependencies {
    implementation project(':mirchord')
    implementation project(':mirconverter')
    implementation project(':mirscore')
    implementation project(':mirtext')
    implementation project(':mirmidi')
    implementation project(':mirsynth')
    implementation project(':mirfoldertreeview')
    implementation project(':mirutils')
    implementation project(':mircoracle')
    implementation project(':mirgene')
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/groovy']
        }
        resources {
            srcDirs = ["src/main/groovy"]
        }
    }
}


def javaHome = System.getenv('JAVA_HOME')

def getDistPath() {
    if (project.hasProperty('distPath')) {
        File distFolder = new File(project.getProperty('distPath'))
        if (distFolder.isDirectory()) {
            return distFolder.getPath()
        }
    }
    return "$buildDir"
}

task copyModules(type: Copy) {
    from(configurations.runtimeClasspath).include("javafx-*.jar")
    into("$buildDir/modules")
}

task copyDependencies(type: Copy) {
    from(configurations.runtimeClasspath).exclude("javafx-*.jar")
    into("$buildDir/jars")
}

task copyMainJar {
    dependsOn build
    doLast {
        ant.with {
            echo("copy main jar")
            copy(todir: "$buildDir/jars") {
                fileset(dir: "$buildDir/libs") {
                    include(name: "**/*.jar")
                }
            }
            echo("done")
        }
    }
}


task jlink(type: Exec) {
    dependsOn build, copyModules
    workingDir 'build'
    commandLine "${javaHome}/bin/jlink",
                "--module-path", "${javaHome}/jmods${File.pathSeparator}$buildDir/modules${File.pathSeparator}$buildDir/libs",
                "--add-modules", "java.se,java.base,java.desktop,java.logging,java.scripting,jdk.jsobject,javafx.fxml,javafx.web,javafx.swing",
                "--output", getDistPath() + "/runtimeimage",
                "--strip-native-commands",
                // "--strip-debug",  // need binutils
                "--strip-java-debug-attributes",
                "--compress", "2",
                "--no-header-files",
                "--no-man-pages"
}

task jpackage(type: Exec) {
    dependsOn clean
    dependsOn jlink, copyDependencies, copyMainJar // inputPackage
    workingDir 'build'
    commandLine "${javaHome}/bin/jpackage", //"create-image", "--win-console"
                "--name", "MirIDE",
                "--type", "app-image",
                "--runtime-image", getDistPath() + "/runtimeimage",
                //"--output", "application",
                "--java-options", "--add-exports java.desktop/com.sun.media.sound=ALL-UNNAMED",
                "--icon", "../../resources/icon.png",
                "--main-class", klassName,
                "--input", "jars",
                "--dest", getDistPath() + "/app",
                "--main-jar", "miride.jar"
}


task createApp(type: Copy) {
    dependsOn jpackage
    from (["../LICENSE", "../LICENSE-ALLJARS", "../licenses"])
    into (getDistPath() + File.separator + 'app' + File.separator + 'legal')
    doLast {
        delete "${getDistPath()}/runtimeimage"
    }
}

// ~/mircomp/miride$ gradle createApp -PdistPath="/home/programs/dist/miride"
// C:\Programs\mircomp\miride> gradle createApp -PdistPath="C:\Programs\dist\miride"

task runMirIDE(type: JavaExec) {
    dependsOn build, copyModules
    description 'Run MirIDE'
    mainClass = klassName
    classpath = sourceSets.main.runtimeClasspath

    jvmArgs = [
        "--module-path", "$buildDir/modules${File.pathSeparator}$buildDir/libs",
        "--add-modules=javafx.graphics,javafx.fxml,javafx.swing,javafx.media,javafx.web",
        "--add-exports", "java.desktop/com.sun.media.sound=ALL-UNNAMED",
        // "--add-exports", "java.desktop/com.sun.media.sound.AudioSynthesizer=ALL-UNNAMED",
    ]

    if (project.hasProperty('custom_arg')) {
        args project.getProperty('custom_arg')
    }
}

defaultTasks 'runMirIDE'
