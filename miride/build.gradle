apply plugin: 'groovy'
//sourceCompatibility = 8

apply plugin: 'application'
mainClassName = 'io.github.mcolletta.miride.MirIDE'

dependencies {
    implementation project(':mirchord')
    implementation project(':mirconverter')
    implementation project(':mirscore')
    implementation project(':mirtext')
    implementation project(':mirmidi')
    implementation project(':mirsynth')
    implementation project(':mirfoldertreeview')
    implementation project(':mirutils')
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/groovy']
        }
        resources {
            srcDirs = ["src/main/groovy"]
        }
    }
}

// version = 1.0.0-alpha.3

distZip {
    into(project.name) {
        from '..'
        include 'licenses/*'
        include 'LICENSE'
        include 'LICENSE-ALLJARS'
        include 'README.md'
    }
    doLast {
        file("$destinationDir/$archiveName").renameTo("$destinationDir/mircomp-1.0.0-alpha.3.zip")
    }
}

jar {
    manifest.attributes 'Created-By': 'Mirco Colletta'
}


def javaPackageHome = System.getenv('JAVA_PACKAGE_HOME')
def javaHome = System.getenv('JAVA_HOME')
def javaFxHome = System.getenv('JAVAFX_HOME')
def javaFxJmods = System.getenv('JAVAFX_JMODS_HOME')

def sep = "/" // File.pathSeparatorChar
def distPath = null

def getDistPath() {
    if (project.hasProperty('distPath')) {
        File distFolder = new File(project.getProperty('distPath'))
        if (distFolder.isDirectory()) {
            return distFolder.getPath()
        }
    }
    return null
}

// task distFolder {
//     doFirst {
//         if (project.hasProperty('distPath')) {
//             File distFolder = new File(project.getProperty('distPath'))
//             if (distFolder.isDirectory()) {
//                 distPath = distFolder.getPath()
//                 println "distPath=" + distPath
//             }
//         } else
//             project.distPath = "build/dist"
//     }
// }

task inputPackage {
    dependsOn build
    doLast {
        def projects = rootProject.subprojects
        def build_paths = ['../libs']
        projects.each() { subproject ->
            build_paths << "../${subproject.name}/build/libs/"
        }
        ant.with {
            echo("create jars folder")
            def destDir = "build/jars"
            if (!new File(destDir).exists())
                mkdir(dir: destDir)
            build_paths.each { path ->
                if (new File(path).exists()) {
                    echo("adding $path")
                    copy(todir: destDir) {
                        fileset(dir: path) {
                            include(name: "**/*.jar")
                        }
                    }
                }
            }
            echo("done")
        }
    }
}

task jlink(type: Exec) {
    dependsOn build
    workingDir 'build'
    commandLine "${javaHome}/bin/jlink",
                "--module-path", "${javaHome}/jmods${File.pathSeparatorChar}${javaFxJmods}",
                "--add-modules", "java.se,java.base,java.desktop,java.logging,java.scripting,jdk.jsobject,javafx.fxml,javafx.web,javafx.swing",
                "--output", getDistPath() + "/runtimeimage",
                "--strip-native-commands",
                // "--strip-debug",  // need binutils
                "--strip-java-debug-attributes",
                "--compress", "2",
                "--no-header-files",
                "--no-man-pages"
}

task jpackage(type: Exec) {
    dependsOn clean
    dependsOn jlink, inputPackage
    workingDir 'build'
    commandLine "${javaHome}/bin/jpackage", //"create-image", "--win-console"
                "--name", "MirIDE",
                "--type", "app-image",
                "--runtime-image", getDistPath() + "/runtimeimage",
                //"--output", "application",
                "--java-options", "--add-exports java.desktop/com.sun.media.sound=ALL-UNNAMED",
                "--icon", "../../resources/icon.png",
                "--main-class", mainClassName,
                "--input", "jars",
                "--dest", getDistPath() + "/app",
                "--main-jar", "miride.jar"
}


task createApp(type: Copy) {
    dependsOn jpackage
    from (["../LICENSE", "../LICENSE-ALLJARS", "../licenses"])
    into (getDistPath() + sep + 'app' + sep + 'legal')
    doLast {
        delete "${getDistPath()}/runtimeimage"
    }
}

// ~/mircomp/miride$ gradle createApp -PdistPath="/home/programs/dist/miride"
// C:\Programs\mircomp\miride> gradle createApp -PdistPath="C:\Programs\dist\miride"

task runMirIDE(type: JavaExec) {
    description 'Run MirIDE'
    main = 'io.github.mcolletta.miride.MirIDE'
    classpath = sourceSets.main.runtimeClasspath

    jvmArgs = [
        "--module-path", "${javaFxHome}/lib",
        "--add-modules=javafx.graphics,javafx.fxml,javafx.swing,javafx.web",
        "--add-exports", "java.desktop/com.sun.media.sound=ALL-UNNAMED",
        // "--add-exports", "java.desktop/com.sun.media.sound.AudioSynthesizer=ALL-UNNAMED",
    ]

    if (project.hasProperty('custom_arg')) {
        args project.getProperty('custom_arg')
    }
}

defaultTasks 'runMirIDE'
